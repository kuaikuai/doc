
;;(set-frame-font "-unknown-VL Gothic-normal-normal-normal-*-15-*-*-*-*-0-iso10646-1")
;;开启新frame时的字体
;;(add-to-list 'default-frame-alist
;;             '(font . "-unknown-VL Gothic-normal-normal-normal-*-15-*-*-*-*-0-iso10646-1")))

(defvar point-stack nil)

(defun yxf-point-stack-push ()
  "Push current location and buffer info onto stack."
  (interactive)
  (message "Location marked.")
  (setq point-stack
        (cons (list (current-buffer) (point)) point-stack)))

(defun yxf-point-stack-pop ()
  "Pop a location off the stack and move to buffer"
  (interactive)
  (if (null point-stack)
      (message "Stack is empty.")
    (switch-to-buffer (caar point-stack))
    (goto-char (cadar point-stack))
    (setq point-stack (cdr point-stack))))

;;格式化整个文件
;;之前我总是先c-x h 选中整个文件，然后ctrl-alt-\，很笨拙
(defun yxf-format-full ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil))

;;使用pdftotext,看pdf
;;对于文字为主的pdf,
;;中间有空格的文件，需要在空格前加\
(defun yxf-pdf (name)
  "Run pdftotext on the entire buffer."
  (interactive "sInput PDF File name:")
  (shell-command
   (concat "pdftotext " name " -")  "*yxf-pdf*"
   ))

;; 我经常用 *scratch*，临时放些文本、写一些函数之类。
;; 快速切换到*scratch*
(defun ywb-create/switch-scratch ()
  (interactive)
  (let ((buf (get-buffer "*scratch*")))
    (switch-to-buffer (get-buffer-create "*scratch*"))
    (when (null buf)
      (lisp-interaction-mode))))

(defun yxf-create/switch-shell ()
  (interactive)
  (let ((buf (get-buffer "*shell*")))
    (switch-to-buffer (get-buffer-create "*shell*"))
    (when (null buf)
      (lisp-interaction-mode))))


;;; 自动调用相应的程序
;;; 不支持文件名中有空格的情况
(defun define-trivial-mode(mode-prefix file-regexp &optional command)
  (or command (setq command mode-prefix))
  (let ((mode-command (intern (concat mode-prefix "-mode"))))
    (fset mode-command
          `(lambda ()
             (interactive)
             (progn
               (message (buffer-file-name))
               (start-process-shell-command ,mode-prefix nil ,command (concat "\"" (buffer-file-name) "\""))
               (kill-buffer (current-buffer)))))
    (add-to-list 'auto-mode-alist (cons file-regexp mode-command))))

(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

;;交换两个窗口，从网上搞的
(defun swap-windows ()
  "If you have 2 windows, it swaps them."
  (interactive)
  (cond ((not (= (count-windows) 2))
         (message "You need exactly 2 windows to do this."))
        (t
         (let* ((w1 (first (window-list)))
                (w2 (second (window-list)))
                (b1 (window-buffer w1))
                (b2 (window-buffer w2))
                (s1 (window-start w1))
                (s2 (window-start w2)))
           (set-window-buffer w1 b2)
           (set-window-buffer w2 b1)
           (set-window-start w1 s2)
           (set-window-start w2 s1)))))

(defun yxf-kill-region-or-line(&optional arg)
  "this function is a wrapper of (kill-line).
   When called interactively with no active region, this function
  will call (kill-line) ,else kill the region."
  (interactive "P")
  (if mark-active
      (if (= (region-beginning) (region-end) ) (kill-line arg)
        (kill-region (region-beginning) (region-end) )
        )
    (kill-line arg)
    )
  )

(defun yxf-switch-num-sign ()
  (interactive)
  (global-set-key (kbd "1")
                  '(lambda ()
                     (interactive)
                     (insert "!")))
  (global-set-key (kbd "M-1")
                  '(lambda ()
                     (interactive)
                     (insert "1")))
  (global-set-key (kbd "<kp-1>")
                  '(lambda ()
                     (interactive)
                     (insert "1")))
  (global-set-key (kbd "2")
                  '(lambda ()
                     (interactive)
                     (insert "@")))
  (global-set-key (kbd "M-2")
                  '(lambda ()
                     (interactive)
                     (insert "2")))
  (global-set-key (kbd "<kp-2>")
                  '(lambda ()
                     (interactive)
                     (insert "2")))
  (global-set-key (kbd "3")
                  '(lambda ()
                     (interactive)
                     (insert "#")))
  (global-set-key (kbd "M-3")
                  '(lambda ()
                     (interactive)
                     (insert "3")))
  (global-set-key (kbd "<kp-3>")
                  '(lambda ()
                     (interactive)
                     (insert "3")))
  (global-set-key (kbd "4")
                  '(lambda ()
                     (interactive)
                     (insert "$")))
  (global-set-key (kbd "M-4")
                  '(lambda ()
                     (interactive)
                     (insert "4")))
  (global-set-key (kbd "<kp-4>")
                  '(lambda ()
                     (interactive)
                     (insert "4")))
  (global-set-key (kbd "5")
                  '(lambda ()
                     (interactive)
                     (insert "%")))
  (global-set-key (kbd "M-5")
                  '(lambda ()
                     (interactive)
                     (insert "5")))
  (global-set-key (kbd "<kp-5>")
                  '(lambda ()
                     (interactive)
                     (insert "5")))
  (global-set-key (kbd "6")
                  '(lambda ()
                     (interactive)
                     (insert "^")))
  (global-set-key (kbd "M-6")
                  '(lambda ()
                     (interactive)
                     (insert "6")))
  (global-set-key (kbd "<kp-6>")
                  '(lambda ()
                     (interactive)
                     (insert "6")))
  (global-set-key (kbd "7")
                  '(lambda ()
                     (interactive)
                     (insert "&")))
  (global-set-key (kbd "M-7")
                  '(lambda ()
                     (interactive)
                     (insert "7")))
  (global-set-key (kbd "<kp-7>")
                  '(lambda ()
                     (interactive)
                     (insert "7")))
  (global-set-key (kbd "8")
                  '(lambda ()
                     (interactive)
                     (insert "*")))
  (global-set-key (kbd "M-8")
                  '(lambda ()
                     (interactive)
                     (insert "8")))
  (global-set-key (kbd "<kp-8>")
                  '(lambda ()
                     (interactive)
                     (insert "8")))
  (global-set-key (kbd "9")
                  '(lambda ()
                     (interactive)
                     (insert "(")))
  (global-set-key (kbd "M-9")
                  '(lambda ()
                     (interactive)
                     (insert "9")))
  (global-set-key (kbd "<kp-9>")
                  '(lambda ()
                     (interactive)
                     (insert "9")))
  (global-set-key (kbd "0")
                  '(lambda ()
                     (interactive)
                     (insert ")")))
  (global-set-key (kbd "M-0")
                  '(lambda ()
                     (interactive)
                     (insert "0")))
  (global-set-key (kbd "<kp-0>")
                  '(lambda ()
                     (interactive)
                     (insert "0"))))

(provide 'tiny)