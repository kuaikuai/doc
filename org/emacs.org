#+OPTIONS: "\n:t"

* C-h r 自带manual
* shell
   emacs支持shell模式有
   shell term ansi-term muti-term eshell
   muti-term可以很容易支持开多个终端
   
   shell-command执行一条命令时很方便 Alt+!
   省去了上下文跳转，思路更加流畅

   在multi-term下使用vi编辑文件时，无法使用esc退出编辑状态
   可以使用C-c C-c term-interrupt-subjob
 
   eshell 是全用elisp实现的，直接直接执行elisp
   (+ 1 1) 输出2
   (find-file /tmp)
   或者file-file /tmp
   如果想打开多个eshell，可以在eshell中执行eshell N （其中N为数字）

   在emacs中，使用ansi-term muti-term登录到其它机器上，
   运行top命令时，会出现'eterm-color'  Unknown terminal type
   -bash-3.00$ echo $TERM   
   'eterm-color'
   运行一下这句，就ok了
   -bash-3.00$ export TERM=eterm
  
* 计算器
   c-x * q   quick-calc
   c-x * c   calc

   其中quick-calc，可以直接输入代数表达式。
   而calc默认的是逆波兰序，例如1+1, 应以此输入1 1 +
   但是可以输入 ' 后也可以直接输入代数表达式
   
   calc进制转换
   d2 d8 d0 d6 以此转换为2、8、10、16进制

* 管理buffers
   emacs强悍一点是buffer狂多。
   默认的list-buffers不好用。
   如何快捷简单的管理buffers呢
   使用ibuffer就是一个很好的选择
   例如/ m 使用模式过滤
      / f  使用名字的正则过滤
      等等
* register
利用 register 保存光标位置.
- C-x r <SPC>; , 会提示输入一个字母, 表示寄存器的名字. 这样这个寄存器就记录了但前的光标位置.
- C-x r j 然后输入寄存器的名字,就可以跳转到原来保存的位置了.
利用 register 保存窗口布局.
C-x r w 可以记录当前的窗口布局,包括光标位置. 同样 C-x r j 就可以恢复窗口布局.
利用 register 保存文字.
C-x r s 可以在寄存器中copy 一段文字.
C-x r i 可以恢复这个文字.

* linux: Unknown terminal type
   在emacs中，使用ansi-term muti-term登录到其它机器上，
   运行top命令时，会出现'eterm-color'  Unknown terminal type
   -bash-3.00$ echo $TERM   
   'eterm-color'
   运行一下这句，就ok了
   -bash-3.00$ export TERM=vt100

* ido烦人一点
   当我要新建一个文件时，如果当前目录下有类似文件名的文件，
   ido总打开这个文件，让不能创建文件。
   这时候你需要再C-f (It should kick you out of ido mode into "normal" find file mode)
   C-x C-f C-f
* 光标移动
   最好的移动是 C-s 和 C-r
* 键盘宏
-  开始 C-x (
-  结束 C-x )
-  播放 C-x e
可以利用重复动作执行10次： C-u 10 C-x e
也可以对宏进行命令并保存在文本中，可以下次使用
M-x name-last-kbd-macro
输入宏的名字
M-x inster-kbd-macro
输入宏的名字，就可以把宏插入到当前buffer中

* kill buffer
   C-x k bufname <RET>
   Kill buffer bufname (kill-buffer). 
   M-x kill-some-buffers
   Offer to kill each buffer, one by one. 
   M-x kill-matching-buffers
   Offer to kill all buffers matching a regular expression.

* buffer切换
  我之前buffer之前的切换，几乎全用tabbar，效率低。
  现在采用helm、history stack 和 register方式，实现快速跳转。
* 版本控制
  emacs 统一的前端VC，
  无论底层使用CVS、SVN操作都一样。
  常用的功能：
  提交 C-x v v
* 设置emacs字体

  通过options菜单选择字体，满意后
  M-x ielm RET 
  执行 (frame-parameter nil 'font) RET
  获取配置的字符串例如"-outline-Courier New-normal-r-normal-normal-16-120-96-96-c-*-iso8859-1"

  把如下形式的代码贴入.emacs，即可。

#+begin_src lisp
(set-default-font "-outline-Courier New-normal-r-normal-normal-16-120-96-96-c-*-iso8859-1")
(add-to-list 'default-frame-alist '(font . "-outline-Courier New-normal-r-normal-normal-16-120-96-96-c-*-iso8859-1"))  
#+end_src

* 交换Ctrl和Alt
1.在linux下:
在~目录下建立名为“.Xmodmap”的文件，
（x一定要大写）
内容如下：
#+begin_example
remove mod1 = Alt_L
remove control = Control_L
add control = Alt_L
add mod1 = Control_L

remove mod1 = Alt_R
remove control = Control_R
add control = Alt_R
add mod1 = Control_R
#+end_example
2.在windows下:
使用KeyTweak之类的软件进行设置.

* 不用shift输入perl $
  最近常写perl，发现输入$等特别累。于是就产生这个想法。
  使用命令：xmodmap -pke 
  显示出：
#+begin_example
....
keycode  10 = 1 exclam 1 exclam
keycode  11 = 2 at 2 at
keycode  12 = 3 numbersign 3 numbersign
keycode  13 = 4 dollar 4 dollar
keycode  14 = 5 percent 5 percent
keycode  15 = 6 asciicircum 6 asciicircum
keycode  16 = 7 ampersand 7 ampersand
keycode  17 = 8 asterisk 8 asterisk
keycode  18 = 9 parenleft 9 parenleft
keycode  19 = 0 parenright 0 parenright
....略
#+end_example
找到我们关心的数字键。
例如数字键“1"
运行命令：
xmodmap -e "keycode  10 = exclam 1 exclam 1"
然后测试发现不用shift可以直接输出#号。

测试感觉很好，但是问题也出来了。
输入法中，选择时输入数字还得shift，累了。

还得采用emacs内部键绑定。

* 把自己经常重复的编辑动作写成elisp函数
  今天在网上看到几个函数，例如格式化整个buffer等，
  我经常全选整个缓存区，然后在ctrl-alt-\，很麻烦

* org-mode 插入时间戳（记日记）
  C-c !
  用于记日记

* emacs + fcitx 不能输入汉字问题
 增加一条配置命令到.emacs把C-SPC组合键屏蔽掉。
 (global-set-key (kbd "C-SPC") 'nil) 
 做个shell文件放在桌面上。
#!/bin/sh
 export LC_CTYPE=zh_CN.UTF-8
 emacs

* emacs 换行符 windows格式转成UNIX格式
#+begin_example
在曙光时，做项目需要在windows上使用putty通过SSH登录到LINUX上写代码，
很不舒服，就是使用samba建立与windows的目录共享。
这样直接可以在windows上操作LINUX上的代码了。
但是问题就来了。windows上换行符与LINUX不同，在windows编辑的文件，在LINUX编译不过。
想了一个简单的办法
#+end_example
#+begin_src lisp
(global-set-key (kbd "C-x C-s") 
  (lambda()
    (interactive)
   (set-buffer-file-coding-system 'unix 't)

    (save-buffer)))
#+end_src
#+begin_example
在保持代码时，自动设置为unix格式。问题就解决了。^_^
(set-buffer-file-coding-system 'unix 't) 关键的一句啊！
#+end_example
* delete line back
  C-0 C-k
* 管理项目
   在项目内，快速打开指定文件，使用find-tag，我绑定到M-.
* etags
  find . -name "*.[ch]" -o -name "*.cpp" -print | etags - 
  find . -name "*.[chCH]" -print | etags -
  上述命令可以在当前目录查找所有的.h和.cpp文件并把它们的摘要提取出来做成TAGS文件，具体的etags的用法可以看一下etags的 manual。
  创建好tag表后，告知emacs。
  M-x visit-tags-table

  如果要emacs自动读取某个TAGS文件，可以在~/.emacs文件中加入一行,设置tags-file-name变量
  (setq tags-file-name "path/TAGS")

  如果要一次查找多个TAGS文件，可以设置tags-table-list变量
  (setq tags-table-list '("path1/TAGS" "path2/TAGS" "path3/TAGS"))
  另外，对于较大又不是经常使用的TAGS，尽量放到该list的后面，避免不必要的打开

  常用的热键：
  M-. 查找一个tag，比如函数定义类型定义等。
  C-u M-. 查找下一个tag的位置
  M-*/M-, 回到上一次运行M-.前的光标位置。
  M-TAB 自动补齐函数名。 

* gpg配合emacs加密文件 
   我使用emacs org-mode记日记,然后通过svn到google code上,
   所以日记最好加一下密毕竟是隐私的东西.
   使用easygpg(emacs自带的lisp)
   在.emacs加入:
    (require 'epa-file)
    (epa-file-enable)
    ;;使用对称加密
    (setq epa-file-encrypt-to nil)
    ;;保存一个session的密码,不然需要总输入密码
    ;; save the password
    (setq epa-file-cache-passphrase-for-symmetric-encryption t)
    ;; auto-save
    (setq epa-file-inhibit-auto-save nil)

    这样遇到.gpg结尾的文件,emacs可以自动调用gpg解密文件,保存时自动加密阿文件了.
* 在org-mode搜索
   org-occur
   org-occur-in-agenda-files
* 编辑远程文件
   使用tramp
   配置文件
   (require 'tramp)
   (setq tramp-default-method "ssh")
   然后使用 /usr@machine:/path/to.file 的语法来访问远程文件。
   tramp与ido-mode冲突时，使用前先关闭ido-mode

   C-x C-f /ssh:root@10.0.64.18
* c/c++几个操作
M-a        移动到当前语句的开始
M-e        移动到当前语句的末尾

C-M-a      移动到当前函数的开始
C-M-e      移动到当前函数的结尾

M-q        若光标在注释文本中间，则进行段落重排，保留缩进和前导字符

C-M-h      把光标放在当前函数开头，把文本块标记放在函数结尾， 即把函数整个选作为一个文本块。

C-c C-q    对整个函数进行缩进
C-x h      选定整个buffer，  然后C-M-\可以对代码进行重新排版

C-c C-u    移动到当前预处理条件的开始位置
C-c C-p    移动到上一个预处理条件
C-c C-n    移动到下一个预处理条件

M-;        对当前行进行注释
C-x C-x    快速返回移动前的光标位置

C-c C-c    对一块代码进行注释；取消注释用命令 uncomment-region

C-c C-\       将区域中的每一行结尾都加入一个'\'字符

* 对齐 align-regexp
   C-M-\，对齐一般都能满足需要
   有时候需要按一行中的某些字符对齐，比如一些变态的语言或者编程规范规定赋值语句需要按”=”对齐，那怎么办?
   比如如下代码:
#+BEGIN_SRC c
int var = 2;
int variable_is_kinda_long = 3;
int var_is_less_long = 4;
#+END_SRC

   需要按 = 对齐，选中执行M-x align-regexp, 然后 regexp 填 =，结果如下:
#+BEGIN_SRC c
int var                    = 2;
int variable_is_kinda_long = 3;
int var_is_less_long       = 4;
#+END_SRC

* occur
  输出 buffer 中符合正则表达式的所有行，在查找替换时，或者需要重构代码时，事先用 occur 来验证下构造的正则表达式的效果，可以避免一时自信或者冲动毁了先前的工作.
* multi-occur-in-matching-buffers
可以对所有打开的 buffer 进行 regex search。
* follow-mode
  现在流行的是宽屏，宽度不是问题，因此 Emacs C-x 3 用的很多，但很多长的文档，要翻好多页，小拇指真疼。 
  竖分屏后执行 follow-mode 后，所有 buffer 显示同一文件的不同部分，可视范围翻倍，甚至数倍，这要看你的屏幕有多宽了。

* 搜索
  M-x rgrep
  在emacs使用find 与 grep，
  岂一个快字了得！
  快速遍历查找！
** emacs 目录搜索
利用 Emacs 本身的搜索功能进行搜索
在 agenda 里用 M-x org-agenda RET s 进行搜索；
当然，也可以直接用 Org 的 occur-tree 功能；
如果你想使用原生态的 Emacs 搜索功能，可以进入 dired 模式到你待搜索的目录里，用命令 M-x grep-find RET 进行本地全文搜索。

* dired-mark-files-regexp, dired-do-rename-regexp and dired-do-shell-command
* shell term上一条命令
#+begin_example
   在终端中经常使用历史中上一条命令，
   使用上下方向键，
   在emacs的终端，再使用方向键优点傻
   上一条：M-p
   下一条：M-n
#+end_example
* mew 显示附件中doc文件
   安装wvHtml
   sudo yum wv
   然后就可以了
* 自动检测文件编码，防止乱码
  ;; auto detect unicode
#+begin_src lisp
  (require 'unicad)
#+end_src
* 画框图
  artist-mode
  按鼠标中键，在弹出的菜单中选择图形
* Ctrl+Space
  在fedora上ctrl+space被ibus占用了。运行ibus-setup修改其设置
* org-mode转word文档
  使用pundoc
#+begin_src lisp
  (save-buffer)
  (shell-command "pandoc -s -s org-to-word.org -o org-to-word.docx")
#+end_src
